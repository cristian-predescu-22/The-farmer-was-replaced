# Main - (Updating to new companion function 10x more resources)
# --------------
while True:
    a = []
    for i in range(get_world_size()):
        new = get_companion()
        a.append(new)
        print(get_companion())
        for _ in range(a[0][1]):
            move(North)
        for _ in range(a[0][2]):
            move(East)
        print(get_companion())

# Positions
# ---------------
def positions():

    if get_pos_y() == 0:
        plant_pumpking()
    elif get_pos_y() == 1:
        plant_pumpking()
    elif get_pos_y() == 2:
        plant_pumpking() #plant_bush()
    elif get_pos_y() == 3:
        plant_carrot()
    elif get_pos_y() == 4:
        plant_tree()
    elif get_pos_y() == 5:
        plant_carrot()
    else:
        plant(Entities.Grass)

# Functions
# ---------------
def move_drone():
    for i in range(get_world_size()):
        move(North)
        
def plant_bush():
    plant(Entities.Bush)
    
def plant_hey():
    plant(Entities.Grass)
    
def plant_carrot():
    trade(Items.Carrot_Seed)
    if get_ground_type() != Grounds.Soil:
        till()
    plant(Entities.Carrots)
    water()
    
def plant_tree():
    if get_ground_type() != Grounds.Soil:
        till()
    plant(Entities.Tree)
    water()
    
def plant_pumpking():
    trade(Items.Pumpkin_Seed)
    if get_ground_type() != Grounds.Soil:
        till()
    plant(Entities.Pumpkin)
    water()
    
def water():
    use_item(Items.Water_Tank)
        
def check_harvest():
    if can_harvest():
        harvest() # harvests to then be able to check the position
        positions() # checks position for requiremnt planting
        move(North)
    else:
        positions() # if it can't harvst to checks positions
                    # for the posibillity of it still growing
                    # also edge case of not being able to get seed
                    # to trade and then plant
        move(North)
